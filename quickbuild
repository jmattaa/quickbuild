# general compiler arguments.
compiler = "clang++";
flags_debug = "-g -O0 -fstandalone-debug -Wall -Wextra -pedantic-errors -Wc++20-designator";
flags_release = "-O3 -fstandalone-debug -Wall -Wextra -pedantic-errors -Wc++20-designator";

# files to compile.
sources = "src/*.cpp";
headers = "src/*.hpp";

# files to create.
objects = sources: "src/*.cpp" -> "obj/*.o";
objects_release = objects;
objects_debug = objects;
binary = "./bin/quickbuild";
install_dir = "/usr/bin";

# main targets.
"quickbuild_debug" {
  depends = "setup", "build_objs_debug";
  run = "[compiler] [flags_debug] [objects] -o [binary]";
}
"quickbuild_release" {
  depends = "setup", "build_objs_release";
  run = "[compiler] [flags_release] [objects] -o [binary]";
}

# abstract tasks for parallel object building.
"build_objs_debug" {
  depends = objects_release, headers;
  depends_parallel = true;
}
"build_objs_release" {
  depends = objects_debug, headers;
  depends_parallel = true;
}

# setup for the build directories.
"setup" {
  run_parallel = true;
  run = "mkdir -p obj",
        "mkdir -p bin";
}

# object files.
objects_debug as obj {
  # If a header is changed, everything needs to be rebuilt
  obj_source = obj: "obj/*.o" -> "src/*.cpp";
  depends = obj_source, headers;
  run = "[compiler] [flags_debug] -c [obj_source] -o [obj]";
}
objects_release as obj {
  # If a header is changed, everything needs to be rebuilt
  obj_source = obj: "obj/*.o" -> "src/*.cpp";
  depends = obj_source, headers;
  run = "[compiler] [flags_release] -c [obj_source] -o [obj]";
}

# binary install.
"install" {
  run = "install -m 755 [binary] [install_dir]";
}

# run output.
"run" {
  depends = "quickbuild_debug";
  run = "[binary]";
}

# clean build directories.
"clean" {
  run_parallel = true;
  run = "rm [objects]",
        "rm [binary]";
}

