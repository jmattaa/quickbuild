#ifndef ERROR_H
#define ERROR_H

#include <map>
#include <optional>
#include <string>
#include <vector>

#include "lexer.hpp"

enum ErrorCode {
  // parser.
  P_NO_MATCH,
  P_FIELD_NO_EXPR,
  P_FIELD_NO_LINESTOP,
  P_TARGET_NO_ITERATOR,
  P_TARGET_NO_OPEN,
  P_TARGET_NO_CLOSE,
  P_AST_INVALID_END,
  P_AST_NO_ARROW,
  P_AST_INVALID_REPLACE,
  P_AST_INVALID_ESCAPE,
  P_AST_NO_CLOSE,

  // interpreter.
  I_NO_TARGETS,
  I_NO_MATCHING_IDENTIFIER,
  I_CONSTRUCTOR_EXPECTED_LITERAL,
  I_CONSTRUCTOR_EXPECTED_BOOL,
  I_CONSTRUCTOR_EXPECTED_NONEMPTY,
  I_EVALUATE_EXPECTED_NONEMPTY,
  I_EVALUATE_QBSTRING_IN_QBBOOL_LIST,
  I_EVALUATE_QBBOOL_IN_QBSTRING_LIST,
  I_EVALUATE_LIST_TYPE_MISMATCH,
  I_EVALUATE_REPLACE_TYPE_ERROR,
  I_REPLACE_CHUNKS_LENGTH_ERROR,

  // lexer.
  L_INVALID_SYMBOL,
  L_INVALID_LITERAL,
};

struct ErrorInfo {
  Origin origin;           // where the error originated in the ascii stream.
  ErrorCode error_code;    // enum variant.
  std::string message;     // generated by table below.
};

// error code: <message, description>
const std::map<ErrorCode, std::string>
    _ERROR_LOOKUP_TABLE = {
        {P_NO_MATCH,
          "An invalid expression was encountered and couldn't be parsed. Are "
          "you trying to declare a field or a target?"},
        {P_FIELD_NO_EXPR,
          "An invalid expression was encountered while parsing a field."},
        {P_FIELD_NO_LINESTOP,
          "A field without a terminating semicolon was encountered."},
        {P_TARGET_NO_ITERATOR,
          "A target with an explicitly declared iterator was encountered, but no iteration variable was found."},
        {P_TARGET_NO_OPEN,
          "A target without an opening curly bracket was encountered."},
        {P_TARGET_NO_CLOSE,
          "A target without a closing curly bracket was encountered."},
        {P_AST_INVALID_END,
          "A list of expressions was encountered but was invalid."},
        {P_AST_NO_ARROW,
          "A replacement was encountered, but no replacement arrow was found."},
        {P_AST_INVALID_REPLACE,
          "A replacement was encountered, but the expressions were invalid."},
        {P_AST_INVALID_ESCAPE,
          "An escaped literal was encountered, but the escaped expression is invalid."},
        {P_AST_NO_CLOSE,
          "An expression without a closing square bracket was encountered."},
        {L_INVALID_SYMBOL,
          "An invalid symbol was encountered and couldn't be lexed. Make sure "
          "no erroneous characters are present in the config."},
        {L_INVALID_LITERAL,
          "An expression inside of an escaped literal is invalid and couldn't "
          "be lexed. Make sure the expression is correct."},
};

class ErrorHandler {
private:
  static std::vector<ErrorInfo> error_stack;

public:
  static void push_error(Origin origin, ErrorCode error_code);
  static void push_error_throw(Origin origin, ErrorCode error_code);
  static std::optional<ErrorInfo> pop_error();
};

class BuildException : public std::exception {
private:
  const char *details;

public:
  BuildException(const char *details) : details(details) {}
  const char *what() const noexcept override { return details; };
};

#endif
